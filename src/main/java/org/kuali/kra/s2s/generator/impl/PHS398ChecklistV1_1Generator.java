/*
 * Copyright 2008 The Kuali Foundation.
 * 
 * Licensed under the Educational Community License, Version 1.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.opensource.org/licenses/ecl1.php
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.kuali.kra.s2s.generator.impl;

import gov.grants.apply.forms.phs398ChecklistV11.PHS398ChecklistDocument;
import gov.grants.apply.forms.phs398ChecklistV11.PHS398ChecklistDocument.PHS398Checklist;
import gov.grants.apply.forms.phs398ChecklistV11.PHS398ChecklistDocument.PHS398Checklist.ApplicationType;
import gov.grants.apply.forms.phs398ChecklistV11.PHS398ChecklistDocument.PHS398Checklist.CertificationExplanation;
import gov.grants.apply.forms.phs398ChecklistV11.PHS398ChecklistDocument.PHS398Checklist.IncomeBudgetPeriod;
import gov.grants.apply.system.attachmentsV10.AttachedFileDataType;
import gov.grants.apply.system.globalLibraryV20.HumanNameDataType;
import gov.grants.apply.system.globalLibraryV20.YesNoDataType;

import java.math.BigDecimal;

import org.apache.log4j.Logger;
import org.apache.xmlbeans.XmlObject;
import org.kuali.kra.budget.core.Budget;
import org.kuali.kra.budget.distributionincome.BudgetProjectIncome;
import org.kuali.kra.budget.document.BudgetDocument;
import org.kuali.kra.proposaldevelopment.bo.Narrative;
import org.kuali.kra.proposaldevelopment.bo.ProposalYnq;
import org.kuali.kra.proposaldevelopment.document.ProposalDevelopmentDocument;
import org.kuali.kra.s2s.S2SException;
import org.kuali.kra.s2s.util.S2SConstants;

/**
 * 
 * This class is used to generate XML Document object for grants.gov PHS398ChecklistV1.1. This form is generated using XMLBean API's
 * generated by compiling PHS398ChecklistV1.1 schema.
 * 
 * @author Kuali Research Administration Team (kualidev@oncourse.iu.edu)
 */
public class PHS398ChecklistV1_1Generator extends PHS398ChecklistBaseGenerator {
    private static final Logger LOG = Logger.getLogger(PHS398ChecklistV1_1Generator.class);

    /**
     * 
     * This method returns PHS398ChecklistDocument object based on proposal development document which contains the
     * PHS398ChecklistDocument informations ApplicationType,FederalID,ChangeOfPDPI,FormerPDName,ChangeOfInstitution,
     * FormerInstitutionName,InventionsAndPatents, ProgramIncome and CertificationExplanation for a particular proposal
     * 
     * @return phsChecklistDocument {@link XmlObject} of type PHS398ChecklistDocument.
     */
    private PHS398ChecklistDocument getPHS398Checklist() {
        PHS398ChecklistDocument phsChecklistDocument = PHS398ChecklistDocument.Factory.newInstance();
        PHS398Checklist phsChecklist = PHS398Checklist.Factory.newInstance();
        phsChecklist.setFormVersion(S2SConstants.FORMVERSION_1_1);
        ApplicationType.Enum applicationEnum = null;
        if (pdDoc.getDevelopmentProposal().getProposalTypeCode() != null && Integer.parseInt(pdDoc.getDevelopmentProposal().getProposalTypeCode()) < PROPOSAL_TYPE_CODE_6) {
            // Check <6 to ensure that if proposalType='TASk ORDER", it must not set. THis is because enum ApplicationType has no
            // entry for TASK ORDER
            applicationEnum = ApplicationType.Enum.forInt(Integer.parseInt(pdDoc.getDevelopmentProposal().getProposalTypeCode()));
        }
        phsChecklist.setApplicationType(applicationEnum);

        String federalId = s2sUtilService.getFederalId(pdDoc);
        if (federalId != null && !federalId.equals(S2SConstants.FEDERAL_ID_NOT_FOUND)) {
            phsChecklist.setFederalID(federalId);
        }

        for (ProposalYnq proposalYnq : pdDoc.getDevelopmentProposal().getProposalYnqs()) {
            if (proposalYnq.getQuestionId() != null && proposalYnq.getQuestionId().equals(PROPOSAL_YNQ_QUESTION_22)) {
                String answer = proposalYnq.getAnswer();
                String explanation = proposalYnq.getExplanation();

                if (S2SConstants.PROPOSAL_YNQ_ANSWER_Y.equals(answer)) {
                    phsChecklist.setIsChangeOfPDPI(YesNoDataType.Y_YES);
                    if (explanation != null) {
                        HumanNameDataType formerPDName = globLibV20Generator.getHumanNameDataType(explanation);
                        if (formerPDName != null && formerPDName.getFirstName() != null && formerPDName.getLastName() != null) {
                            phsChecklist.setFormerPDName(formerPDName);
                        }
                    }
                }
                else {
                    phsChecklist.setIsChangeOfPDPI(YesNoDataType.N_NO);
                }
            }
        }
        for (ProposalYnq proposalYnq : pdDoc.getDevelopmentProposal().getProposalYnqs()) {
            if (proposalYnq.getQuestionId() != null && proposalYnq.getQuestionId().equals(PROPOSAL_YNQ_QUESTION_23)) {
                String answer = proposalYnq.getAnswer();
                String explanation = proposalYnq.getExplanation();

                if (S2SConstants.PROPOSAL_YNQ_ANSWER_Y.equals(answer)) {
                    phsChecklist.setIsChangeOfInstitution(YesNoDataType.Y_YES);
                    if (explanation != null) {
                        phsChecklist.setFormerInstitutionName(explanation);
                    }
                }
                else {
                    phsChecklist.setIsChangeOfInstitution(YesNoDataType.N_NO);
                }
            }
        }
        for (ProposalYnq proposalYnq : pdDoc.getDevelopmentProposal().getProposalYnqs()) {
            if (proposalYnq.getQuestionId() != null && proposalYnq.getQuestionId().equals(PROPOSAL_YNQ_QUESTION_16)) {
                String answer = proposalYnq.getAnswer();
                if (S2SConstants.PROPOSAL_YNQ_ANSWER_Y.equals(answer)) {
                    phsChecklist.setIsInventionsAndPatents(YesNoDataType.Y_YES);
                    phsChecklist.setIsPreviouslyReported(YesNoDataType.Y_YES);
                }
                else if (S2SConstants.PROPOSAL_YNQ_ANSWER_NA.equals(answer)) {
                    phsChecklist.setIsInventionsAndPatents(YesNoDataType.N_NO);
                }
                else {
                    phsChecklist.setIsInventionsAndPatents(YesNoDataType.Y_YES);
                    phsChecklist.setIsPreviouslyReported(YesNoDataType.N_NO);
                }
            }
        }

        Budget budget = null;
        try {
            BudgetDocument budgetDocument = s2sBudgetCalculatorService.getFinalBudgetVersion(pdDoc);
            budget = budgetDocument==null?null:budgetDocument.getBudget();
        }
        catch (S2SException e) {
            LOG.error(e.getMessage(), e);
            return phsChecklistDocument;
        }


        if (budget != null && budget.getBudgetProjectIncomes().size() > 0) {
            phsChecklist.setProgramIncome(YesNoDataType.Y_YES);
            IncomeBudgetPeriod incomeBudgPeriod = IncomeBudgetPeriod.Factory.newInstance();
            IncomeBudgetPeriod[] budgetPeriodsArray = null;
            if (budget.getBudgetProjectIncomes() != null) {
                budgetPeriodsArray = new IncomeBudgetPeriod[budget.getBudgetProjectIncomes().size()];
            }
            int periodCount = 0;
            BigDecimal amount = BigDecimal.ZERO;
            for (BudgetProjectIncome projectIncome : budget.getBudgetProjectIncomes()) {
                if (projectIncome.getProjectIncome() != null) {
                    amount = amount.add(projectIncome.getProjectIncome().bigDecimalValue());
                }
                incomeBudgPeriod.setAnticipatedAmount(amount);
                if (projectIncome.getDescription() != null) {
                    if (projectIncome.getDescription().length() > PROJECT_INCOME_DESCRIPTION_MAX_LENGTH) {
                        incomeBudgPeriod.setSource(projectIncome.getDescription().substring(0,
                                PROJECT_INCOME_DESCRIPTION_MAX_LENGTH));
                    }
                    else {
                        incomeBudgPeriod.setSource(projectIncome.getDescription());
                    }
                }
                incomeBudgPeriod.setBudgetPeriod(projectIncome.getBudgetPeriodNumber());
                if (budgetPeriodsArray != null) {
                    budgetPeriodsArray[periodCount] = incomeBudgPeriod;
                }
                periodCount++;
            }
            phsChecklist.setIncomeBudgetPeriodArray(budgetPeriodsArray);
        }
        else {
            phsChecklist.setProgramIncome(YesNoDataType.N_NO);
        }

        for (Narrative narrative : pdDoc.getDevelopmentProposal().getNarratives()) {
            if (narrative.getNarrativeTypeCode() != null
                    && Integer.parseInt(narrative.getNarrativeTypeCode()) == CERTIFICATIONS_ATTACHMENT_CODE) {
                CertificationExplanation certExplanation = CertificationExplanation.Factory.newInstance();
                AttachedFileDataType attachedFileDataType = AttachedFileDataType.Factory.newInstance();
                attachedFileDataType = getAttachedFileType(narrative);
                certExplanation.setCertifications(attachedFileDataType);
                phsChecklist.setCertificationExplanation(certExplanation);
            }
        }
        phsChecklistDocument.setPHS398Checklist(phsChecklist);
        return phsChecklistDocument;
    }

    /**
     * This method creates {@link XmlObject} of type {@link PHS398ChecklistDocument} by populating data from the given
     * {@link ProposalDevelopmentDocument}
     * 
     * @param proposalDevelopmentDocument for which the {@link XmlObject} needs to be created
     * @return {@link XmlObject} which is generated using the given {@link ProposalDevelopmentDocument}
     * @see org.kuali.kra.s2s.generator.S2SFormGenerator#getFormObject(ProposalDevelopmentDocument)
     */
    public XmlObject getFormObject(ProposalDevelopmentDocument proposalDevelopmentDocument) {
        this.pdDoc = proposalDevelopmentDocument;
        return getPHS398Checklist();
    }

    /**
     * This method typecasts the given {@link XmlObject} to the required generator type and returns back the document of that
     * generator type.
     * 
     * @param xmlObject which needs to be converted to the document type of the required generator
     * @return {@link XmlObject} document of the required generator type
     * @see org.kuali.kra.s2s.generator.S2SFormGenerator#getFormObject
     */
    public XmlObject getFormObject(XmlObject xmlObject) {
        PHS398Checklist phsChecklist = (PHS398Checklist) xmlObject;
        PHS398ChecklistDocument phsChecklistDocument = PHS398ChecklistDocument.Factory.newInstance();
        phsChecklistDocument.setPHS398Checklist(phsChecklist);
        return phsChecklistDocument;
    }

}
